name: Build and Release

on:
  push:
    branches:
      - main

jobs:
  test-and-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: FedericoCarboni/setup-ffmpeg@v3
        id: setup-ffmpeg
        with:
          ffmpeg-version: 4.4.1
          architecture: 'x64'
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'

      - name: Install Dependencies
        run: go mod download

#      - name: Run Tests
#        run: go test ./...

      - name: Build Binaries
        env:
          CGO_ENABLED: 0
        run: |
          # Set the output directory
          OUTPUT_DIR="dist"
          mkdir -p $OUTPUT_DIR

          # List of platforms to build for
          PLATFORMS=(
              "windows/amd64"
              "darwin/amd64"
              "darwin/arm64"
              "linux/amd64"
              "linux/arm64"
          )

          # Build the project for each platform
          for PLATFORM in "${PLATFORMS[@]}"; do
              OS=$(echo $PLATFORM | cut -d'/' -f1)
              ARCH=$(echo $PLATFORM | cut -d'/' -f2)
              OUTPUT_NAME="test_media_generator"

              if [ "$OS" = "windows" ]; then
                  OUTPUT_NAME+=".exe"
              fi

              echo "Building for $OS/$ARCH..."

              # Set environment variables for cross-compilation
              GOOS=$OS GOARCH=$ARCH go build -o $OUTPUT_DIR/$OS-$ARCH/$OUTPUT_NAME

              if [ $? -ne 0 ]; then
                  echo "An error occurred while building for $OS/$ARCH."
                  exit 1
              fi
          done

          echo "Builds completed successfully."

      - name: Archive Binaries
        run: |
          cd dist
          for PLATFORM in *; do
            zip -r ${PLATFORM}.zip $PLATFORM
          done
          cd ..

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: binaries
          path: dist/*.zip

      - name: Generate Release Tag
        id: generate_tag
        shell: bash
        run: |
          TAG="v$(date -u +'%Y%m%d%H%M%S')"
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.generate_tag.outputs.tag }}
          name: Release ${{ steps.generate_tag.outputs.tag }}
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release Assets
        uses: actions/github-script@v6
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          UPLOAD_URL: ${{ steps.create_release.outputs.upload_url }}
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            const uploadUrl = process.env.UPLOAD_URL;

            const files = fs.readdirSync('dist').filter(file => file.endsWith('.zip'));
            console.log(`Found ${files.length} files to upload.`);

            for (const file of files) {
              const filePath = path.join('dist', file);
              const fileSize = fs.statSync(filePath).size;
              const fileStream = fs.createReadStream(filePath);

              console.log(`Uploading ${file}...`);

              await github.rest.repos.uploadReleaseAsset({
                url: uploadUrl,
                headers: {
                  'content-type': 'application/zip',
                  'content-length': fileSize,
                },
                name: file,
                data: fileStream,
              });
            }
