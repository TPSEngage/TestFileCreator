name: Build and Release

on:
  push:
    branches:
      - main

jobs:

  test:
    runs-on: ubuntu-latest
    outputs:
      release_tag: ${{ steps.set_release_tag.outputs.release_tag }}
    steps:
      - uses: actions/checkout@v3
      - uses: FedericoCarboni/setup-ffmpeg@v3
        id: setup-ffmpeg
        with:
          ffmpeg-version: release
          architecture: 'x64'
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'

      - name: Install Dependencies
        run: go mod download

      - name: Run Tests
        run: go test ./...

      - name: Get Release Tag
        id: set_release_tag
        run: |
          echo "release_tag=v$(date -u +'%Y%m%d%H%M%S')" >> $GITHUB_OUTPUT

  build:
    needs: test
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            goos: linux
            arch: amd64
          - os: ubuntu-latest
            goos: linux
            arch: arm64
          - os: windows-latest
            goos: windows
            arch: amd64
          - os: macos-latest
            goos: darwin
            arch: amd64
          - os: macos-latest
            goos: darwin
            arch: arm64
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'

      - name: Install Dependencies
        run: go mod download

      - name: Build
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.arch }}
          GOEXE: ${{ matrix.goos == 'windows' && '.exe' || '' }}
        run: |
          echo "Building for $GOOS/$GOARCH..."
          mkdir -p dist/${GOOS}-${GOARCH}
          GOOS=$GOOS GOARCH=$GOARCH go build -o dist/${GOOS}-${GOARCH}/test_media_generator$GOEXE

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: build-${{ matrix.goos }}-${{ matrix.arch }}
          path: dist/${GOOS}-${GOARCH}

  release:
    needs: [test, build]
    runs-on: ubuntu-latest
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          name: '**'
          path: ./dist

      - name: Create Release
        id: create_release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ needs.test.outputs.release_tag }}
          name: Release ${{ needs.test.outputs.release_tag }}
          commit: ${{ github.sha }}
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release Assets
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            const release_id = steps.create_release.outputs.id;
            const distDir = './dist';

            async function uploadAsset(filePath) {
              const contentType = 'application/octet-stream';
              const fileName = path.basename(filePath);
              const fileSize = fs.statSync(filePath).size;
              const fileData = fs.createReadStream(filePath);

              console.log(`Uploading ${fileName}...`);

              await github.rest.repos.uploadReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: release_id,
                name: fileName,
                data: fileData,
                headers: {
                  'content-type': contentType,
                  'content-length': fileSize,
                },
              });
            }

            function getFiles(dir) {
              let files = [];
              fs.readdirSync(dir).forEach((file) => {
                const fullPath = path.join(dir, file);
                if (fs.lstatSync(fullPath).isDirectory()) {
                  files = files.concat(getFiles(fullPath));
                } else {
                  files.push(fullPath);
                }
              });
              return files;
            }

            const files = getFiles(distDir);
            console.log(`Found ${files.length} files to upload.`);
            for (const file of files) {
              await uploadAsset(file);
            }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
